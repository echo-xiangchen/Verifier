find_max(a : ARRAY[INTEGER]) : INTEGER
local
   i : INTEGER
require
   no_restriction : (a.count > 0)
do
from
  i := a.lower;
  Result := a[i];
invariant
  loop_invariant : forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j]))
until
  (i > a.upper)
loop
if (a[i] > Result) then
  Result := a[i];
end
  i := (i + 1);
variant
  loop_variant : ((a.upper - i) + 1)
end
ensure
   correct_result : forall k | (((a.lower <= k) and (k <= a.upper)) => (Result >= a[k]))
end

Where: 
Precondition(Q) : 
   no_restriction : (a.count > 0)
Postcondition(R) : 
   correct_result : forall k | (((a.lower <= k) and (k <= a.upper)) => (Result >= a[k]))
Implementation(S) : 
from
  i := a.lower;
  Result := a[i];
invariant
  loop_invariant : forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j]))
until
  (i > a.upper)
loop
if (a[i] > Result) then
  Result := a[i];
end
  i := (i + 1);
variant
  loop_variant : ((a.upper - i) + 1)
end
Correctness conditions : 
1. Given precondition Q, the initialization step Sinit establishes LI I : {Q} Sinit {I}
  ((a.count > 0) => forall j | (((a.lower <= j) and (j < a.lower)) => (a[a.lower] >= a[j])))

2. At the end of Sbody, if not yet to exit, LI I is maintained : {I and (not B)} Sbody {I}
  ((forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j])) and (not (i > a.upper))) => (((a[i] > Result) => forall j | (((a.lower <= j) and (j < (i + 1))) => (a[i] >= a[j]))) and ((not (a[i] > Result)) => forall j | (((a.lower <= j) and (j < (i + 1))) => (Result >= a[j])))))

3. If ready to exit and LI I maintained, postcondition R is established : I and B => R
  ((forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j])) and (i > a.upper)) => forall k | (((a.lower <= k) and (k <= a.upper)) => (Result >= a[k])))

4. Given LI I, and not yet to exit, Sbody maintains LV V as non-negative : {I and (not B)} Sbody {V >= 0}
  ((forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j])) and (not (i > a.upper))) => (((a[i] > Result) => (((a.upper - (i + 1)) + 1) >= 0)) and ((not (a[i] > Result)) => (((a.upper - (i + 1)) + 1) >= 0))))

5. Given LI I, and not yet to exit, Sbody decrements LV V : {I and (not B)} Sbody {V < V0}
  ((forall j | (((a.lower <= j) and (j < i)) => (Result >= a[j])) and (not (i > a.upper))) => (((a[i] > Result) => (((a.upper - (i + 1)) + 1) < ((a.upper - i) + 1))) and ((not (a[i] > Result)) => (((a.upper - (i + 1)) + 1) < ((a.upper - i) + 1)))))

Condition 1 is discharged.
Condition 2 is discharged.
Condition 3 is discharged.
Condition 4 is discharged.
Condition 5 is discharged.
