TypeChecker.varMap: {(q and p)=(types.BoolType@38082d64, null), (not (m <= 0))=(types.BoolType@dfd3711, null), (i * j)=(types.IntType@42d3bd8b, null), (q and ((i <= j) or (not (m <= 0))))=(types.BoolType@26ba2a48, null), (12 * 2)=(types.IntType@5f2050f6, null), ((5 * 6) - 9)=(types.IntType@3b81a1bc, null), (not (i <= m))=(types.BoolType@64616ca2, null), (35 - (12 * 2))=(types.IntType@13fee20c, null), (5 * 6)=(types.IntType@4e04a765, null), (i <= m)=(types.BoolType@783e6358, null), 12=(types.IntType@17550481, null), 35=(types.IntType@735f7ae5, null), ((p => (m <= (i * j))) and (not (i <= m)))=(types.BoolType@180bc464, null), (m <= 0)=(types.BoolType@1324409e, null), (s or q)=(types.BoolType@2c6a3f77, null), i=(types.IntType@246ae04d, logic.composite.Subtraction@62043840), j=(types.IntType@5315b42e, logic.composite.Addition@2ef9b8bc), m=(types.IntType@5d624da6, logic.composite.Subtraction@1e67b872), p=(types.BoolType@60addb54, logic.composite.BoolTrue@3f2a3a5), 0=(types.IntType@4cb2c100, null), 1=(types.IntType@6fb554cc, null), (1 + 9)=(types.IntType@614c5515, null), (not p)=(types.BoolType@77b52d12, null), q=(types.BoolType@2d554825, logic.composite.Negation@68837a77), (((not r) and (s or q)) = ((p => (m <= (i * j))) and (not (i <= m))))=(types.BoolType@6be46e8f, null), 2=(types.IntType@3567135c, null), r=(types.BoolType@327471b5, logic.composite.Implication@4157f54e), ((not p) => (q and p))=(types.BoolType@90f6bfd, null), s=(types.BoolType@47f6473, logic.composite.Iff@15975490), (not r)=(types.BoolType@6b143ee9, null), (p => (m <= (i * j)))=(types.BoolType@1936f0f5, null), 5=(types.IntType@6615435c, null), 6=(types.IntType@4909b8da, null), ((i <= j) or (not (m <= 0)))=(types.BoolType@3a03464, null), true=(types.BoolType@2d3fcdbd, null), (p = (q and ((i <= j) or (not (m <= 0)))))=(types.BoolType@617c74e5, null), (r and p)=(types.BoolType@6537cf78, null), 9=(types.IntType@67b6d4ae, null), ((not r) and (s or q))=(types.BoolType@34b7bfc0, null), ((r and p) = (q and p))=(types.BoolType@366e2eef, null), (i <= j)=(types.BoolType@6df97b55, null), (m <= (i * j))=(types.BoolType@3cbbc1e0, null)}

AntlrToLogic.varMap: {p=Bool, q=Bool, r=Bool, s=Bool, i=Int, j=Int, m=Int}

Formula: (p = (q and ((i <= j) or (not (m <= 0)))))
Where: 
    p : BOOLEAN = true
    q : BOOLEAN = (not p)
    i : INTEGER = ((5 * 6) - 9)
    j : INTEGER = (1 + 9)
    m : INTEGER = (35 - (12 * 2))

Is not a tautology. Here is a counter example: 
    m : 11
    j : 10
    i : 21
    q : false
    p : true

Formula: (((not r) and (s or q)) = ((p => (m <= (i * j))) and (not (i <= m))))
Where: 
    p : BOOLEAN = true
    q : BOOLEAN = (not p)
    r : BOOLEAN = ((not p) => (q and p))
    s : BOOLEAN = ((r and p) = (q and p))
    i : INTEGER = ((5 * 6) - 9)
    j : INTEGER = (1 + 9)
    m : INTEGER = (35 - (12 * 2))

Is not a tautology. Here is a counter example: 
    p : true
    r : true
    m : 11
    j : 10
    i : 21
    s : false
    q : false

