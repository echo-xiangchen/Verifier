TypeChecker.varMap: {(i >= m)=(types.BoolType@64616ca2, null), (p => (((q and ((i >= j) = (not (m = 0)))) or (n <= (i + j))) or ((not q) and (not (j > (n - m))))))=(types.BoolType@13fee20c, null), (i + (m * j))=(types.IntType@4e04a765, null), ((i >= j) = (not (m = 0)))=(types.BoolType@783e6358, null), (12 * 2)=(types.IntType@17550481, null), (((q and ((i >= j) = (not (m = 0)))) or (n <= (i + j))) or ((not q) and (not (j > (n - m)))))=(types.BoolType@735f7ae5, null), ((5 * 6) - 9)=(types.IntType@180bc464, null), ((m * i) + j)=(types.IntType@1324409e, null), (((not r) and (s or q)) = (((p or (m = (i * n))) and (not (i >= m))) => (n > ((m * i) + j))))=(types.BoolType@2c6a3f77, null), (not q)=(types.BoolType@246ae04d, null), (q and ((i >= j) = (not (m = 0))))=(types.BoolType@62043840, null), ((not q) and (not (j > (n - m))))=(types.BoolType@5315b42e, null), (35 - (12 * 2))=(types.IntType@2ef9b8bc, null), (not (i >= m))=(types.BoolType@5d624da6, null), 12=(types.IntType@1e67b872, null), (s or q)=(types.BoolType@60addb54, null), (n <= (i + j))=(types.BoolType@3f2a3a5, null), (not (m = 0))=(types.BoolType@4cb2c100, null), 0=(types.IntType@6fb554cc, null), 1=(types.IntType@614c5515, null), (1 + 9)=(types.IntType@77b52d12, null), (not p)=(types.BoolType@2d554825, null), 2=(types.IntType@68837a77, null), ((not p) => (q and p))=(types.BoolType@6be46e8f, null), 5=(types.IntType@3567135c, null), 6=(types.IntType@327471b5, null), (p or (m = (i * n)))=(types.BoolType@4157f54e, null), true=(types.BoolType@90f6bfd, null), (r and p)=(types.BoolType@47f6473, null), 9=(types.IntType@15975490, null), ((r and p) = (q and p))=(types.BoolType@6b143ee9, null), (m * i)=(types.IntType@1936f0f5, null), (((p or (m = (i * n))) and (not (i >= m))) => (n > ((m * i) + j)))=(types.BoolType@6615435c, null), 25=(types.IntType@4909b8da, null), (q and p)=(types.BoolType@3a03464, null), (i * n)=(types.IntType@2d3fcdbd, null), (n - m)=(types.IntType@617c74e5, null), (n > ((m * i) + j))=(types.BoolType@6537cf78, null), (5 * 6)=(types.IntType@67b6d4ae, null), (not (j > (n - m)))=(types.BoolType@34b7bfc0, null), (i >= j)=(types.BoolType@366e2eef, null), (m * j)=(types.IntType@6df97b55, null), 35=(types.IntType@3cbbc1e0, null), i=(types.IntType@35fb3008, logic.composite.Subtraction@7225790e), j=(types.IntType@54a097cc, logic.composite.Addition@36f6e879), m=(types.IntType@5a61f5df, logic.composite.Subtraction@3551a94), n=(types.IntType@531be3c5, logic.composite.Subtraction@52af6cff), (i + j)=(types.IntType@735b478, null), (m = (i * n))=(types.BoolType@2c9f9fb0, null), (m = 0)=(types.BoolType@2096442d, null), p=(types.BoolType@9f70c54, logic.composite.BoolTrue@234bef66), q=(types.BoolType@737996a0, logic.composite.Negation@61dc03ce), r=(types.BoolType@50f8360d, logic.composite.Implication@2cb4c3ab), ((i + (m * j)) - 25)=(types.IntType@13c78c0b, null), ((q and ((i >= j) = (not (m = 0)))) or (n <= (i + j)))=(types.BoolType@12843fce, null), s=(types.BoolType@3dd3bcd, logic.composite.Iff@97e1986), (not r)=(types.BoolType@26f67b76, null), ((p or (m = (i * n))) and (not (i >= m)))=(types.BoolType@153f5a29, null), (j > (n - m))=(types.BoolType@7f560810, null), ((not r) and (s or q))=(types.BoolType@69d9c55, null)}

AntlrToLogic.varMap: {p=Bool, q=Bool, r=Bool, s=Bool, i=Int, j=Int, m=Int, n=Int}

Formula: (p => (((q and ((i >= j) = (not (m = 0)))) or (n <= (i + j))) or ((not q) and (not (j > (n - m)))))) is a tautology.

Formula: (((not r) and (s or q)) = (((p or (m = (i * n))) and (not (i >= m))) => (n > ((m * i) + j))))
Where: 
    p : BOOLEAN = true
    q : BOOLEAN = (not p)
    r : BOOLEAN = ((not p) => (q and p))
    s : BOOLEAN = ((r and p) = (q and p))
    i : INTEGER = ((5 * 6) - 9)
    j : INTEGER = (1 + 9)
    m : INTEGER = (35 - (12 * 2))
    n : INTEGER = ((i + (m * j)) - 25)

Is not a tautology. Here is a counter example: 
    p : true
    r : true
    n : 106
    m : 11
    j : 10
    i : 21
    s : false
    q : false

