TypeChecker.varMap: {(i * j)=(types.IntType@dfd3711, null), (p => ((m > (i * j)) and (not (i > m))))=(types.BoolType@42d3bd8b, null), (not k)=(types.BoolType@26ba2a48, null), (m > 0)=(types.BoolType@5f2050f6, null), (not r0)=(types.BoolType@3b81a1bc, null), ((not k) and r)=(types.BoolType@64616ca2, null), (p = ((q and (i > j)) or (not (m > 0))))=(types.BoolType@13fee20c, null), ((q and (i > j)) or (not (m > 0)))=(types.BoolType@4e04a765, null), ((m > (i * j)) and (not (i > m)))=(types.BoolType@783e6358, null), s1=(types.BoolType@17550481, logic.composite.BoolTrue@735f7ae5), (not (i > m))=(types.BoolType@180bc464, null), 35=(types.IntType@1324409e, null), (i > j)=(types.BoolType@2c6a3f77, null), (s or q)=(types.BoolType@246ae04d, null), false=(types.BoolType@62043840, null), i=(types.IntType@5315b42e, logic.composite.IntConst@2ef9b8bc), j=(types.IntType@5d624da6, logic.composite.IntConst@1e67b872), (s1 => ((not k) and r))=(types.BoolType@60addb54, null), k=(types.BoolType@3f2a3a5, logic.composite.BoolFalse@4cb2c100), m=(types.IntType@6fb554cc, logic.composite.IntConst@614c5515), p=(types.BoolType@77b52d12, logic.composite.BoolTrue@2d554825), 0=(types.IntType@68837a77, null), (m > (i * j))=(types.BoolType@6be46e8f, null), 1=(types.IntType@3567135c, null), q=(types.BoolType@327471b5, logic.composite.BoolFalse@4157f54e), (i > (j - m))=(types.BoolType@90f6bfd, null), ((not r0) = ((s1 => ((not k) and r)) or (i > (j - m))))=(types.BoolType@47f6473, null), r=(types.BoolType@15975490, logic.composite.BoolTrue@6b143ee9), s=(types.BoolType@1936f0f5, logic.composite.BoolFalse@6615435c), (not r)=(types.BoolType@4909b8da, null), ((s1 => ((not k) and r)) or (i > (j - m)))=(types.BoolType@3a03464, null), 5=(types.IntType@2d3fcdbd, null), true=(types.BoolType@617c74e5, null), (i > m)=(types.BoolType@6537cf78, null), (((not r) and (s or q)) = (p => ((m > (i * j)) and (not (i > m)))))=(types.BoolType@67b6d4ae, null), ((not r) and (s or q))=(types.BoolType@34b7bfc0, null), (q and (i > j))=(types.BoolType@366e2eef, null), (not (m > 0))=(types.BoolType@6df97b55, null), r0=(types.BoolType@3cbbc1e0, logic.composite.BoolFalse@35fb3008), (j - m)=(types.IntType@7225790e, null)}

AntlrToLogic.varMap: {p=Bool, q=Bool, r=Bool, s=Bool, i=Int, j=Int, k=Bool, m=Int, s1=Bool, r0=Bool}

Formula: (p = ((q and (i > j)) or (not (m > 0))))
Where: 
    p : BOOLEAN = true
    q : BOOLEAN = false
    i : INTEGER = 5
    j : INTEGER = 1
    m : INTEGER = 35

Is not a tautology. Here is a counter example: 
    m : 35
    j : 1
    i : 5
    q : false
    p : true

Formula: (((not r) and (s or q)) = (p => ((m > (i * j)) and (not (i > m)))))
Where: 
    p : BOOLEAN = true
    q : BOOLEAN = false
    r : BOOLEAN = true
    s : BOOLEAN = false
    i : INTEGER = 5
    j : INTEGER = 1
    m : INTEGER = 35

Is not a tautology. Here is a counter example: 
    p : true
    r : true
    m : 35
    j : 1
    i : 5
    s : false
    q : false

Formula: ((not r0) = ((s1 => ((not k) and r)) or (i > (j - m)))) is a tautology.

